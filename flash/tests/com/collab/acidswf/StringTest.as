// Copyright (c) The AcidSWF Project.// See LICENSE.txt for details.
package com.collab.acidswf
{	import flash.events.Event;		import org.hamcrest.assertThat;	import org.hamcrest.collection.array;	import org.hamcrest.collection.arrayWithSize;	import org.hamcrest.object.equalTo;	import org.hamcrest.object.instanceOf;	import org.hamcrest.text.emptyString;
		/**	 * String tests.	 * 	 * @language 3.0	 * @playerversion Flash 9.0	 * @since 1.0 	 */
	public class StringTest extends BaseTest
	{		private static const TIMEOUT:Number = 10000;				private static var longStringData:String;		private static var reallyLongStringData:String;		private static var giganticStringData:String;				[Before]		public function setUp():void		{			setup();						var i: Number;			longStringData = "";						// 10,000 chars			for (i=0; i<1000; i++)				longStringData = longStringData + "0123456789";						// 100,000 chars			reallyLongStringData = "";			for (i=0; i<10000; i++)				reallyLongStringData = reallyLongStringData + "0123456789";						// 1,000,000 chars			giganticStringData = "";			for (i=0; i<100000; i++)				giganticStringData = giganticStringData + "0123456789";		}				[After]		public function tearDown():void		{			teardown();						longStringData = null;			reallyLongStringData = null;			giganticStringData = null;		}				[Test(async)]		public function create():void		{			setupCall( function(event:Event, passThroughData:*):void			{				assertThat( loader.result, instanceOf( String ));				assertThat( loader.result, emptyString());			},			"" );		}				[Test(async)]		public function simple():void		{			setupCall( function(event:Event, passThroughData:*):void			{				assertThat( loader.result, equalTo( "Hello world!" ));			},			"Hello world!" );		}				[Test(async)]		public function list():void		{			var strings: Array = new Array();			strings.push("test1", "test2", "test3", "test4");						setupCall( function(event:Event, passThroughData:*):void			{				assertThat( loader.result, arrayWithSize( 4 ));				assertThat( loader.result, array( "test1", "test2", "test3", "test4" ));			},			strings );		}				[Test(async)]		public function longString():void		{			setupCall( function(event:Event, passThroughData:*):void			{				assertThat( loader.result, equalTo( longStringData ));			},			longStringData, TIMEOUT );		}				[Test(async)]		public function reallyLongString():void		{			setupCall( function(event:Event, passThroughData:*):void			{				assertThat( loader.result, equalTo( reallyLongStringData ));			},			reallyLongStringData, TIMEOUT );		}				[Test(async)]		public function giganticString():void		{			setupCall( function(event:Event, passThroughData:*):void			{				assertThat( loader.result, equalTo( giganticStringData ));			},			giganticStringData, TIMEOUT );		}		
	}
}
