// Copyright (c) The AcidSWF Project.// See LICENSE.txt for details.package com.collab.acidswf{	import flash.events.Event;		import org.hamcrest.assertThat;	import org.hamcrest.object.equalTo;	import org.hamcrest.object.instanceOf;
		/**	 * Tests for the Number type.	 * 	 * @language 3.0	 * @playerversion Flash 9.0	 * @since 1.0 	 */	public class NumberTest extends BaseTest	{		[Before]		public function setUp():void		{			setup();		}				[After]		public function tearDown():void		{			teardown();		}				[Test(async)]		public function create():void		{			setupCall( function(event:Event, passThroughData:*):void			{				assertThat( loader.result, equalTo( 0 ));			},			0 );		}				[Test(async)]		public function positive():void		{			var list:Array = [ 1, 256, 65536, 0.0, 1.5,							   Number.POSITIVE_INFINITY ];						setupCall( function(event:Event, passThroughData:*):void			{				assertThat( loader.result[0], equalTo( 1 ));				assertThat( loader.result[1], equalTo( 256 ));				assertThat( loader.result[2], equalTo( 65536 ));				assertThat( loader.result[3], equalTo( 0.0 ));				assertThat( loader.result[4], equalTo( 1.5 ));				assertThat( loader.result[5], equalTo( Number.POSITIVE_INFINITY ));			},			list );		}				[Test(async)]		public function negative():void		{			var list:Array = [ -1, -256, -65536, -1.5,						       Number.NEGATIVE_INFINITY ];						setupCall( function(event:Event, passThroughData:*):void			{				assertThat( loader.result[0], equalTo( -1 ));				assertThat( loader.result[1], equalTo( -256 ));				assertThat( loader.result[2], equalTo( -65536 ));				assertThat( loader.result[3], equalTo( -1.5 ));				assertThat( loader.result[4], equalTo( Number.NEGATIVE_INFINITY ));			},			list );		}				[Test(async)]		public function isNaN():void		{			setupCall( function(event:Event, passThroughData:*):void			{				assertThat( loader.result, equalTo( Number.NaN ));			},			Number.NaN );		}				[Test(async)]		public function max_value():void		{			setupCall( function(event:Event, passThroughData:*):void			{				assertThat( loader.result, equalTo( Number.MAX_VALUE ));			},			Number.MAX_VALUE );		}				[Test(async)]		public function min_value():void		{			setupCall( function(event:Event, passThroughData:*):void			{				assertThat( loader.result, equalTo( Number.MIN_VALUE ));			},			Number.MIN_VALUE );		}				[Test(async)]		public function uint_value():void		{			setupCall( function(event:Event, passThroughData:*):void			{				assertThat( loader.result, instanceOf( uint ));				assertThat( loader.result, equalTo( 0x000000 ));			},			uint( 0x000000 ) );		}		}}